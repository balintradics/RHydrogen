/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.21
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE "rhydrogen"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "00-01-01"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int number_gridpts_arg;	/**< @brief Number of grid points, e.g. 100.  */
  char * number_gridpts_orig;	/**< @brief Number of grid points, e.g. 100 original value given at command line.  */
  const char *number_gridpts_help; /**< @brief Number of grid points, e.g. 100 help description.  */
  int scale_param_arg;	/**< @brief Scale parameter, e.g. 4000.  */
  char * scale_param_orig;	/**< @brief Scale parameter, e.g. 4000 original value given at command line.  */
  const char *scale_param_help; /**< @brief Scale parameter, e.g. 4000 help description.  */
  float l_orbital_qn_arg;	/**< @brief Orbital angular momentum quantum number, e.g. for H 1s electron orbit it would be 0, etc.  */
  char * l_orbital_qn_orig;	/**< @brief Orbital angular momentum quantum number, e.g. for H 1s electron orbit it would be 0, etc original value given at command line.  */
  const char *l_orbital_qn_help; /**< @brief Orbital angular momentum quantum number, e.g. for H 1s electron orbit it would be 0, etc help description.  */
  float j_total_qn_arg;	/**< @brief Total angular momentum quantum number, e.g. for H 1s electon orbit (l = 0, s = 1/2) it would be 0+0.5 = 0.5, etc.  */
  char * j_total_qn_orig;	/**< @brief Total angular momentum quantum number, e.g. for H 1s electon orbit (l = 0, s = 1/2) it would be 0+0.5 = 0.5, etc original value given at command line.  */
  const char *j_total_qn_help; /**< @brief Total angular momentum quantum number, e.g. for H 1s electon orbit (l = 0, s = 1/2) it would be 0+0.5 = 0.5, etc help description.  */
  int Z_nucl_charge_arg;	/**< @brief Charge of nucleus, e.g. 2 for alpha, etc..  */
  char * Z_nucl_charge_orig;	/**< @brief Charge of nucleus, e.g. 2 for alpha, etc. original value given at command line.  */
  const char *Z_nucl_charge_help; /**< @brief Charge of nucleus, e.g. 2 for alpha, etc. help description.  */
  
  int help_given ;	/**< @brief Whether help was given.  */
  int version_given ;	/**< @brief Whether version was given.  */
  int number_gridpts_given ;	/**< @brief Whether number-gridpts was given.  */
  int scale_param_given ;	/**< @brief Whether scale-param was given.  */
  int l_orbital_qn_given ;	/**< @brief Whether l-orbital-qn was given.  */
  int j_total_qn_given ;	/**< @brief Whether j-total-qn was given.  */
  int Z_nucl_charge_given ;	/**< @brief Whether Z-nucl-charge was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 0) */
  int check_required; /**< @brief whether to check that all required options were provided (default 0) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to 0
 * @return the initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_init();

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
